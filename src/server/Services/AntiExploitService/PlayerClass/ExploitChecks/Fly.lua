local FlyCheck = {
	MaxTimeInAir = 5	
}

local function dist(v1: Vector3,v2: Vector3)
	return (v1-v2).Magnitude
end

function FlyCheck:Check(playerObj)--Class
	local playerInfo = playerObj.Info
	
	local passed = true
	local returnMessage = ""
	local rootPos = playerInfo.RootPart.Position
	local lastPos = playerInfo.LastPosition
	local bottomPos = rootPos - Vector3.new(0,10,0)


	local RaycastParameters = RaycastParams.new()
	RaycastParameters.FilterDescendantsInstances = {playerInfo.Player.Character}
	RaycastParameters.FilterType = Enum.RaycastFilterType.Blacklist

	local result = workspace:Raycast(rootPos,(bottomPos- rootPos).Unit * dist(bottomPos,rootPos),RaycastParameters)
	local isGoodTerrain = false
	local areGoodParts = false

	if not result then --Checks with better checks
		local nearbyParts = {}	--Checks for valid parts to stand on	
		local rad = Vector3.new(10, 10,10)
		local searchRegion = Region3.new(playerInfo.LastPosition - rad, playerInfo.LastPosition + rad)
		--Checks for valid parts
		for _, part in pairs(workspace:FindPartsInRegion3(searchRegion, playerInfo.RootPart.Parent, 30)) do
			if part:CanCollideWith(playerInfo.Head) then
				local result = workspace:Raycast(rootPos,(part.Position - rootPos).Unit * 20,RaycastParameters)
				if result then 
					areGoodParts = true
					break
				end

			end
		end
		--Checks for valid terrain
		local td1, td2 = workspace.Terrain:ReadVoxels(searchRegion:ExpandToGrid(4), 4)
		for _, xt in ipairs(td1) do
			if isGoodTerrain then
				break
			end
			for _, yt in ipairs(xt) do
				if isGoodTerrain then
					break
				end
				for _, cell in ipairs(yt) do
					if cell ~= Enum.Material.Air then
						isGoodTerrain = true
						break
					end
				end
			end
		end
	end

	if not result and not isGoodTerrain and not areGoodParts then
		playerInfo.InAir = playerInfo.InAir or tick()
		if tick() - playerInfo.InAir > self.MaxTimeInAir then
			passed = false
			returnMessage = playerInfo.Name.." was in the air for longer than ".. tostring(self.MaxTimeInAir).." seconds..."
			playerInfo.InAir = nil			
		end
	elseif result or isGoodTerrain or areGoodParts then
		playerInfo.InAir = nil
	end

	return passed,returnMessage
end

function FlyCheck:Punish(playerObj)--Class
	print("punished")
	playerObj.Info.Player:LoadCharacter()
end

return FlyCheck
